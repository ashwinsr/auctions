// Code generated by protoc-gen-go.
// source: github.com/ashwinsr/auctions/lib/pb/comm.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	github.com/ashwinsr/auctions/lib/pb/comm.proto

It has these top-level messages:
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import common_pb "github.com/ashwinsr/auctions/common_pb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// const _ = grpc.SupportPackageIsVersion3

// Client API for ZKPAuction service

type ZKPAuctionClient interface {
	Publish(ctx context.Context, in *common_pb.OuterStruct, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type zKPAuctionClient struct {
	cc *grpc.ClientConn
}

func NewZKPAuctionClient(cc *grpc.ClientConn) ZKPAuctionClient {
	return &zKPAuctionClient{cc}
}

func (c *zKPAuctionClient) Publish(ctx context.Context, in *common_pb.OuterStruct, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pb.ZKPAuction/Publish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ZKPAuction service

type ZKPAuctionServer interface {
	Publish(context.Context, *common_pb.OuterStruct) (*google_protobuf.Empty, error)
}

func RegisterZKPAuctionServer(s *grpc.Server, srv ZKPAuctionServer) {
	s.RegisterService(&_ZKPAuction_serviceDesc, srv)
}

func _ZKPAuction_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common_pb.OuterStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZKPAuctionServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ZKPAuction/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZKPAuctionServer).Publish(ctx, req.(*common_pb.OuterStruct))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZKPAuction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ZKPAuction",
	HandlerType: (*ZKPAuctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _ZKPAuction_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("github.com/ashwinsr/auctions/lib/pb/comm.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x8e, 0x31, 0x0b, 0xc2, 0x30,
	0x10, 0x46, 0xc5, 0x41, 0x21, 0x63, 0x87, 0x0e, 0x75, 0xf3, 0x07, 0xdc, 0x81, 0x1d, 0x9d, 0x1c,
	0x1c, 0xc4, 0xc1, 0x82, 0x9b, 0x8b, 0xf4, 0x42, 0x6d, 0x03, 0x4d, 0x2e, 0x24, 0x17, 0xc4, 0x7f,
	0x2f, 0x6d, 0xd4, 0xd1, 0xf5, 0xe3, 0x7b, 0x8f, 0xa7, 0xa0, 0x37, 0x32, 0x24, 0x02, 0xcd, 0x16,
	0xdb, 0x38, 0x3c, 0x8d, 0x8b, 0x01, 0xdb, 0xa4, 0xc5, 0xb0, 0x8b, 0x38, 0x1a, 0x42, 0x4f, 0xa8,
	0xd9, 0x5a, 0xf0, 0x81, 0x85, 0x8b, 0xa5, 0xa7, 0x6a, 0xd3, 0x33, 0xf7, 0x63, 0x87, 0xf3, 0x42,
	0xe9, 0x81, 0x9d, 0xf5, 0xf2, 0xca, 0x87, 0xaa, 0xfe, 0x2b, 0x9c, 0x4c, 0xec, 0xee, 0x1f, 0x27,
	0xbb, 0x0c, 0xed, 0x4e, 0x4a, 0xdd, 0xce, 0xcd, 0x21, 0xbf, 0x8a, 0xbd, 0x5a, 0x37, 0x89, 0x46,
	0x13, 0x87, 0xa2, 0x84, 0x1f, 0x01, 0x97, 0x24, 0x5d, 0xb8, 0x4a, 0x48, 0x5a, 0xaa, 0x12, 0x72,
	0x03, 0x7c, 0x1b, 0xe0, 0x38, 0x35, 0x6c, 0x17, 0xb4, 0x9a, 0x97, 0xfa, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0x56, 0x5f, 0xb4, 0x0d, 0xd9, 0x00, 0x00, 0x00,
}
