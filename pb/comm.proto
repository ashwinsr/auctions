syntax = "proto3";

package pb;

import "google/protobuf/empty.proto";


// The ZKPAuction service definition.
service ZKPAuction {
  // Sends a key
  rpc SendKey (Key) returns (google.protobuf.Empty) {}

  // TODO millionaire specific
  rpc MillionaireAlphaBeta (AlphaBeta) returns (google.protobuf.Empty) {}
  rpc MillionaireGammaDelta1 (MixedOutput) returns (google.protobuf.Empty) {}
  rpc MillionaireGammaDelta2 (MixedOutput) returns (google.protobuf.Empty) {}
  rpc MillionaireRandomizeOutput (RandomizedOutput) returns (google.protobuf.Empty) {}
  rpc MillionaireDecryptionInfo (DecryptionInfo) returns (google.protobuf.Empty) {}
}

// The request message containing the user's name.
message Key {
  bytes key = 1;

  // Zero knowledge proof of key's logarithm
  DiscreteLogKnowledge proof = 2;
}

// TODO millionaire specific
message AlphaBeta {
  repeated bytes alphas = 1;
  repeated bytes betas = 2;

  repeated EqualsOneOfTwo proofs = 3;
}

// TODO millionaire specific
message MixedOutput {
  repeated bytes gammas = 1;
  repeated bytes deltas = 2;

  VerifiableShuffle proof = 3;
}

// TODO millionaire specific
message RandomizedOutput {
  repeated bytes gammas = 1;
  repeated bytes deltas = 2;

  repeated DiscreteLogEquality proofs = 3;
}

// TODO millionaire specific
message DecryptionInfo {
  repeated bytes phis = 1;

  repeated DiscreteLogEquality proofs = 2;
}

message DiscreteLogKnowledge {
  bytes t = 1;
  bytes r = 2;
}

message EqualsOneOfTwo {
  bytes a_1 = 1;
  bytes a_2 = 2;
  bytes b_1 = 3;
  bytes b_2 = 4;
  bytes d_1 = 5;
  bytes d_2 = 6;
  bytes r_1 = 7;
  bytes r_2 = 8;
}

message VerifiableShuffle {
  repeated bytes c = 1;
  bytes cd = 2;
  bytes cD = 3;
  bytes ER = 4;
  repeated bytes f = 5;
  bytes fd = 6;
  bytes yd = 7;
  bytes zd = 8;
  repeated bytes F = 9;
  bytes yD = 10;
  bytes zD = 11;
  bytes Z = 12;
}

message DiscreteLogEquality {
  repeated bytes ts = 1;
  bytes r = 2;
}