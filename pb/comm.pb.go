// Code generated by protoc-gen-go.
// source: comm.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	comm.proto

It has these top-level messages:
	Key
	AlphaBeta
	MixedOutput
	RandomizedOutput
	DecryptionInfo
	DiscreteLogKnowledge
	EqualsOneOfTwo
	VerifiableShuffle
	DiscreteLogEquality
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type Key struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Zero knowledge proof of key's logarithm
	Proof *DiscreteLogKnowledge `protobuf:"bytes,2,opt,name=proof" json:"proof,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Key) GetProof() *DiscreteLogKnowledge {
	if m != nil {
		return m.Proof
	}
	return nil
}

// TODO millionaire specific
type AlphaBeta struct {
	Alphas [][]byte          `protobuf:"bytes,1,rep,name=alphas,proto3" json:"alphas,omitempty"`
	Betas  [][]byte          `protobuf:"bytes,2,rep,name=betas,proto3" json:"betas,omitempty"`
	Proofs []*EqualsOneOfTwo `protobuf:"bytes,3,rep,name=proofs" json:"proofs,omitempty"`
}

func (m *AlphaBeta) Reset()                    { *m = AlphaBeta{} }
func (m *AlphaBeta) String() string            { return proto.CompactTextString(m) }
func (*AlphaBeta) ProtoMessage()               {}
func (*AlphaBeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AlphaBeta) GetProofs() []*EqualsOneOfTwo {
	if m != nil {
		return m.Proofs
	}
	return nil
}

// TODO millionaire specific
type MixedOutput struct {
	Gammas [][]byte           `protobuf:"bytes,1,rep,name=gammas,proto3" json:"gammas,omitempty"`
	Deltas [][]byte           `protobuf:"bytes,2,rep,name=deltas,proto3" json:"deltas,omitempty"`
	Proof  *VerifiableShuffle `protobuf:"bytes,3,opt,name=proof" json:"proof,omitempty"`
}

func (m *MixedOutput) Reset()                    { *m = MixedOutput{} }
func (m *MixedOutput) String() string            { return proto.CompactTextString(m) }
func (*MixedOutput) ProtoMessage()               {}
func (*MixedOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MixedOutput) GetProof() *VerifiableShuffle {
	if m != nil {
		return m.Proof
	}
	return nil
}

// TODO millionaire specific
type RandomizedOutput struct {
	Gammas [][]byte               `protobuf:"bytes,1,rep,name=gammas,proto3" json:"gammas,omitempty"`
	Deltas [][]byte               `protobuf:"bytes,2,rep,name=deltas,proto3" json:"deltas,omitempty"`
	Proofs []*DiscreteLogEquality `protobuf:"bytes,3,rep,name=proofs" json:"proofs,omitempty"`
}

func (m *RandomizedOutput) Reset()                    { *m = RandomizedOutput{} }
func (m *RandomizedOutput) String() string            { return proto.CompactTextString(m) }
func (*RandomizedOutput) ProtoMessage()               {}
func (*RandomizedOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RandomizedOutput) GetProofs() []*DiscreteLogEquality {
	if m != nil {
		return m.Proofs
	}
	return nil
}

// TODO millionaire specific
type DecryptionInfo struct {
	Phis   [][]byte               `protobuf:"bytes,1,rep,name=phis,proto3" json:"phis,omitempty"`
	Proofs []*DiscreteLogEquality `protobuf:"bytes,2,rep,name=proofs" json:"proofs,omitempty"`
}

func (m *DecryptionInfo) Reset()                    { *m = DecryptionInfo{} }
func (m *DecryptionInfo) String() string            { return proto.CompactTextString(m) }
func (*DecryptionInfo) ProtoMessage()               {}
func (*DecryptionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DecryptionInfo) GetProofs() []*DiscreteLogEquality {
	if m != nil {
		return m.Proofs
	}
	return nil
}

type DiscreteLogKnowledge struct {
	T []byte `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	R []byte `protobuf:"bytes,2,opt,name=r,proto3" json:"r,omitempty"`
}

func (m *DiscreteLogKnowledge) Reset()                    { *m = DiscreteLogKnowledge{} }
func (m *DiscreteLogKnowledge) String() string            { return proto.CompactTextString(m) }
func (*DiscreteLogKnowledge) ProtoMessage()               {}
func (*DiscreteLogKnowledge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type EqualsOneOfTwo struct {
	A_1 []byte `protobuf:"bytes,1,opt,name=a_1,json=a1,proto3" json:"a_1,omitempty"`
	A_2 []byte `protobuf:"bytes,2,opt,name=a_2,json=a2,proto3" json:"a_2,omitempty"`
	B_1 []byte `protobuf:"bytes,3,opt,name=b_1,json=b1,proto3" json:"b_1,omitempty"`
	B_2 []byte `protobuf:"bytes,4,opt,name=b_2,json=b2,proto3" json:"b_2,omitempty"`
	D_1 []byte `protobuf:"bytes,5,opt,name=d_1,json=d1,proto3" json:"d_1,omitempty"`
	D_2 []byte `protobuf:"bytes,6,opt,name=d_2,json=d2,proto3" json:"d_2,omitempty"`
	R_1 []byte `protobuf:"bytes,7,opt,name=r_1,json=r1,proto3" json:"r_1,omitempty"`
	R_2 []byte `protobuf:"bytes,8,opt,name=r_2,json=r2,proto3" json:"r_2,omitempty"`
}

func (m *EqualsOneOfTwo) Reset()                    { *m = EqualsOneOfTwo{} }
func (m *EqualsOneOfTwo) String() string            { return proto.CompactTextString(m) }
func (*EqualsOneOfTwo) ProtoMessage()               {}
func (*EqualsOneOfTwo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type VerifiableShuffle struct {
}

func (m *VerifiableShuffle) Reset()                    { *m = VerifiableShuffle{} }
func (m *VerifiableShuffle) String() string            { return proto.CompactTextString(m) }
func (*VerifiableShuffle) ProtoMessage()               {}
func (*VerifiableShuffle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type DiscreteLogEquality struct {
	Ts [][]byte `protobuf:"bytes,1,rep,name=ts,proto3" json:"ts,omitempty"`
	R  []byte   `protobuf:"bytes,2,opt,name=r,proto3" json:"r,omitempty"`
}

func (m *DiscreteLogEquality) Reset()                    { *m = DiscreteLogEquality{} }
func (m *DiscreteLogEquality) String() string            { return proto.CompactTextString(m) }
func (*DiscreteLogEquality) ProtoMessage()               {}
func (*DiscreteLogEquality) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*Key)(nil), "pb.Key")
	proto.RegisterType((*AlphaBeta)(nil), "pb.AlphaBeta")
	proto.RegisterType((*MixedOutput)(nil), "pb.MixedOutput")
	proto.RegisterType((*RandomizedOutput)(nil), "pb.RandomizedOutput")
	proto.RegisterType((*DecryptionInfo)(nil), "pb.DecryptionInfo")
	proto.RegisterType((*DiscreteLogKnowledge)(nil), "pb.DiscreteLogKnowledge")
	proto.RegisterType((*EqualsOneOfTwo)(nil), "pb.EqualsOneOfTwo")
	proto.RegisterType((*VerifiableShuffle)(nil), "pb.VerifiableShuffle")
	proto.RegisterType((*DiscreteLogEquality)(nil), "pb.DiscreteLogEquality")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// TODO FIX THIS
// const _ = grpc.SupportPackageIsVersion3

// Client API for ZKPAuction service

type ZKPAuctionClient interface {
	// Sends a key
	SendKey(ctx context.Context, in *Key, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// TODO millionaire specific
	MillionaireAlphaBeta(ctx context.Context, in *AlphaBeta, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	MillionaireGammaDelta1(ctx context.Context, in *MixedOutput, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	MillionaireGammaDelta2(ctx context.Context, in *MixedOutput, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	MillionaireRandomizeOutput(ctx context.Context, in *RandomizedOutput, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	MillionaireDecryptionInfo(ctx context.Context, in *DecryptionInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type zKPAuctionClient struct {
	cc *grpc.ClientConn
}

func NewZKPAuctionClient(cc *grpc.ClientConn) ZKPAuctionClient {
	return &zKPAuctionClient{cc}
}

func (c *zKPAuctionClient) SendKey(ctx context.Context, in *Key, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pb.ZKPAuction/SendKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zKPAuctionClient) MillionaireAlphaBeta(ctx context.Context, in *AlphaBeta, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pb.ZKPAuction/MillionaireAlphaBeta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zKPAuctionClient) MillionaireGammaDelta1(ctx context.Context, in *MixedOutput, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pb.ZKPAuction/MillionaireGammaDelta1", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zKPAuctionClient) MillionaireGammaDelta2(ctx context.Context, in *MixedOutput, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pb.ZKPAuction/MillionaireGammaDelta2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zKPAuctionClient) MillionaireRandomizeOutput(ctx context.Context, in *RandomizedOutput, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pb.ZKPAuction/MillionaireRandomizeOutput", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zKPAuctionClient) MillionaireDecryptionInfo(ctx context.Context, in *DecryptionInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pb.ZKPAuction/MillionaireDecryptionInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ZKPAuction service

type ZKPAuctionServer interface {
	// Sends a key
	SendKey(context.Context, *Key) (*google_protobuf.Empty, error)
	// TODO millionaire specific
	MillionaireAlphaBeta(context.Context, *AlphaBeta) (*google_protobuf.Empty, error)
	MillionaireGammaDelta1(context.Context, *MixedOutput) (*google_protobuf.Empty, error)
	MillionaireGammaDelta2(context.Context, *MixedOutput) (*google_protobuf.Empty, error)
	MillionaireRandomizeOutput(context.Context, *RandomizedOutput) (*google_protobuf.Empty, error)
	MillionaireDecryptionInfo(context.Context, *DecryptionInfo) (*google_protobuf.Empty, error)
}

func RegisterZKPAuctionServer(s *grpc.Server, srv ZKPAuctionServer) {
	s.RegisterService(&_ZKPAuction_serviceDesc, srv)
}

func _ZKPAuction_SendKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZKPAuctionServer).SendKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ZKPAuction/SendKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZKPAuctionServer).SendKey(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZKPAuction_MillionaireAlphaBeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlphaBeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZKPAuctionServer).MillionaireAlphaBeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ZKPAuction/MillionaireAlphaBeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZKPAuctionServer).MillionaireAlphaBeta(ctx, req.(*AlphaBeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZKPAuction_MillionaireGammaDelta1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MixedOutput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZKPAuctionServer).MillionaireGammaDelta1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ZKPAuction/MillionaireGammaDelta1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZKPAuctionServer).MillionaireGammaDelta1(ctx, req.(*MixedOutput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZKPAuction_MillionaireGammaDelta2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MixedOutput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZKPAuctionServer).MillionaireGammaDelta2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ZKPAuction/MillionaireGammaDelta2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZKPAuctionServer).MillionaireGammaDelta2(ctx, req.(*MixedOutput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZKPAuction_MillionaireRandomizeOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomizedOutput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZKPAuctionServer).MillionaireRandomizeOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ZKPAuction/MillionaireRandomizeOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZKPAuctionServer).MillionaireRandomizeOutput(ctx, req.(*RandomizedOutput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZKPAuction_MillionaireDecryptionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZKPAuctionServer).MillionaireDecryptionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ZKPAuction/MillionaireDecryptionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZKPAuctionServer).MillionaireDecryptionInfo(ctx, req.(*DecryptionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZKPAuction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ZKPAuction",
	HandlerType: (*ZKPAuctionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendKey",
			Handler:    _ZKPAuction_SendKey_Handler,
		},
		{
			MethodName: "MillionaireAlphaBeta",
			Handler:    _ZKPAuction_MillionaireAlphaBeta_Handler,
		},
		{
			MethodName: "MillionaireGammaDelta1",
			Handler:    _ZKPAuction_MillionaireGammaDelta1_Handler,
		},
		{
			MethodName: "MillionaireGammaDelta2",
			Handler:    _ZKPAuction_MillionaireGammaDelta2_Handler,
		},
		{
			MethodName: "MillionaireRandomizeOutput",
			Handler:    _ZKPAuction_MillionaireRandomizeOutput_Handler,
		},
		{
			MethodName: "MillionaireDecryptionInfo",
			Handler:    _ZKPAuction_MillionaireDecryptionInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("comm.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xb1, 0xdd, 0xa6, 0x30, 0x09, 0x69, 0xd9, 0x86, 0x60, 0xc2, 0x25, 0xf2, 0x29, 0x02,
	0xe4, 0xc8, 0xdb, 0x07, 0x40, 0x85, 0x54, 0x55, 0x95, 0x56, 0x41, 0x2e, 0x70, 0xe0, 0x12, 0xad,
	0xe3, 0x75, 0xb2, 0x60, 0x7b, 0x8d, 0xbd, 0x56, 0x31, 0x4f, 0xc2, 0x89, 0x67, 0x45, 0xbb, 0xeb,
	0xfc, 0xa5, 0x54, 0xd0, 0xdb, 0xce, 0x4f, 0xb3, 0xdf, 0x68, 0x66, 0xbe, 0x01, 0x98, 0xf1, 0x24,
	0x71, 0xb3, 0x9c, 0x0b, 0x8e, 0xcc, 0x2c, 0xe8, 0xbd, 0x98, 0x73, 0x3e, 0x8f, 0xe9, 0x50, 0x91,
	0xa0, 0x8c, 0x86, 0x34, 0xc9, 0x44, 0xa5, 0x13, 0x9c, 0x73, 0xb0, 0xc6, 0xb4, 0x42, 0x47, 0x60,
	0x7d, 0xa5, 0x95, 0x6d, 0xf4, 0x8d, 0x41, 0xcb, 0x97, 0x4f, 0xe4, 0xc2, 0x7e, 0x96, 0x73, 0x1e,
	0xd9, 0x66, 0xdf, 0x18, 0x34, 0xb1, 0xed, 0x66, 0x81, 0x3b, 0x62, 0xc5, 0x2c, 0xa7, 0x82, 0x5e,
	0xf2, 0xf9, 0x38, 0xe5, 0x37, 0x31, 0x0d, 0xe7, 0xd4, 0xd7, 0x69, 0x0e, 0x85, 0x47, 0xa7, 0x71,
	0xb6, 0x20, 0x6f, 0xa9, 0x20, 0xa8, 0x0b, 0x0d, 0x22, 0x83, 0xc2, 0x36, 0xfa, 0xd6, 0xa0, 0xe5,
	0xd7, 0x11, 0xea, 0xc0, 0x7e, 0x40, 0x05, 0x29, 0x6c, 0x53, 0x61, 0x1d, 0xa0, 0x97, 0xd0, 0x50,
	0x1a, 0x85, 0x6d, 0xf5, 0xad, 0x41, 0x13, 0x23, 0x59, 0xeb, 0xec, 0x5b, 0x49, 0xe2, 0x62, 0x92,
	0xd2, 0x49, 0xf4, 0xe1, 0x86, 0xfb, 0x75, 0x86, 0xf3, 0x05, 0x9a, 0x57, 0xec, 0x3b, 0x0d, 0x27,
	0xa5, 0xc8, 0x4a, 0x21, 0x0b, 0xcd, 0x49, 0x92, 0xac, 0x0b, 0xe9, 0x48, 0xf2, 0x90, 0xc6, 0xeb,
	0x4a, 0x75, 0x84, 0x5e, 0x2d, 0xbb, 0xb2, 0x54, 0x57, 0x4f, 0x65, 0xa5, 0x4f, 0x34, 0x67, 0x11,
	0x23, 0x41, 0x4c, 0xaf, 0x17, 0x65, 0x14, 0xc5, 0xab, 0x96, 0x0a, 0x38, 0xf2, 0x49, 0x1a, 0xf2,
	0x84, 0xfd, 0xb8, 0x77, 0xc1, 0xe1, 0x4e, 0x6f, 0xcf, 0x76, 0xe6, 0xa8, 0xda, 0x64, 0xa2, 0x5a,
	0x35, 0xf8, 0x11, 0xda, 0x23, 0x3a, 0xcb, 0xab, 0x4c, 0x30, 0x9e, 0x5e, 0xa4, 0x11, 0x47, 0x08,
	0xf6, 0xb2, 0x05, 0x5b, 0x16, 0x54, 0xef, 0x0d, 0x59, 0xf3, 0xdf, 0x64, 0x31, 0x74, 0x6e, 0xdb,
	0x1e, 0x6a, 0x81, 0x21, 0xea, 0xb5, 0x1b, 0x42, 0x46, 0xb9, 0x5a, 0x78, 0xcb, 0x37, 0x72, 0xe7,
	0xa7, 0x01, 0xed, 0xed, 0x35, 0xa0, 0x43, 0xb0, 0xc8, 0xd4, 0xab, 0x3f, 0x98, 0xc4, 0xd3, 0x00,
	0xd7, 0x7f, 0x4c, 0x82, 0x25, 0x08, 0xa6, 0x9e, 0x9a, 0x6f, 0xcb, 0x37, 0x03, 0x4f, 0x03, 0x6c,
	0xef, 0xd5, 0x40, 0x65, 0x84, 0x53, 0xcf, 0xde, 0xd7, 0x20, 0xf4, 0x34, 0xc0, 0x76, 0xa3, 0x06,
	0x2a, 0x23, 0x9f, 0x7a, 0xf6, 0x81, 0x06, 0xb9, 0xa7, 0x01, 0xb6, 0x1f, 0xd6, 0x00, 0x3b, 0xc7,
	0xf0, 0xe4, 0x8f, 0xb5, 0x39, 0x27, 0x70, 0x7c, 0xcb, 0x08, 0x50, 0x1b, 0x4c, 0xb1, 0x9c, 0x9e,
	0x29, 0x8a, 0xed, 0x26, 0xf1, 0x2f, 0x0b, 0xe0, 0xf3, 0xf8, 0xfd, 0x69, 0x39, 0x93, 0x03, 0x47,
	0xaf, 0xe1, 0xe0, 0x9a, 0xa6, 0xa1, 0xbc, 0x89, 0x03, 0x39, 0xd3, 0x31, 0xad, 0x7a, 0x5d, 0x57,
	0x5f, 0x90, 0xbb, 0xbc, 0x20, 0xf7, 0x4c, 0x5e, 0x90, 0xf3, 0x00, 0xbd, 0x81, 0xce, 0x15, 0x8b,
	0x63, 0xc6, 0x53, 0xc2, 0x72, 0xba, 0xf6, 0xff, 0x63, 0xf9, 0x75, 0x15, 0xde, 0x21, 0xf0, 0x0e,
	0xba, 0x1b, 0x02, 0xe7, 0xd2, 0x4b, 0x23, 0x69, 0x1c, 0x0f, 0x1d, 0x4a, 0x89, 0x0d, 0xab, 0xdf,
	0x43, 0x04, 0xff, 0x8f, 0xc8, 0x25, 0xf4, 0x36, 0x44, 0x56, 0xbe, 0xaf, 0x6d, 0xdf, 0x91, 0x42,
	0xbb, 0xc7, 0x70, 0x87, 0xda, 0x05, 0x3c, 0xdf, 0x50, 0xdb, 0x35, 0xb4, 0x32, 0xeb, 0x16, 0xfb,
	0xbb, 0x54, 0xd0, 0x50, 0xe4, 0xe4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x22, 0x7c, 0x5a,
	0xd7, 0x04, 0x00, 0x00,
}
