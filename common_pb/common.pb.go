// Code generated by protoc-gen-go.
// source: github.com/ashwinsr/auctions/common_pb/common.proto
// DO NOT EDIT!

/*
Package common_pb is a generated protocol buffer package.

It is generated from these files:
	github.com/ashwinsr/auctions/common_pb/common.proto

It has these top-level messages:
	OuterStruct
	Key
	DiscreteLogKnowledge
	EqualsOneOfTwo
	VerifiableShuffle
	DiscreteLogEquality
*/
package common_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OuterStruct struct {
	Clientid int32  `protobuf:"varint,1,opt,name=clientid" json:"clientid,omitempty"`
	Stepid   int32  `protobuf:"varint,2,opt,name=stepid" json:"stepid,omitempty"`
	Data     []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *OuterStruct) Reset()                    { *m = OuterStruct{} }
func (m *OuterStruct) String() string            { return proto.CompactTextString(m) }
func (*OuterStruct) ProtoMessage()               {}
func (*OuterStruct) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OuterStruct) GetClientid() int32 {
	if m != nil {
		return m.Clientid
	}
	return 0
}

func (m *OuterStruct) GetStepid() int32 {
	if m != nil {
		return m.Stepid
	}
	return 0
}

func (m *OuterStruct) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// The request message containing the user's name.
type Key struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Zero knowledge proof of key's logarithm
	Proof *DiscreteLogKnowledge `protobuf:"bytes,2,opt,name=proof" json:"proof,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Key) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Key) GetProof() *DiscreteLogKnowledge {
	if m != nil {
		return m.Proof
	}
	return nil
}

type DiscreteLogKnowledge struct {
	T []byte `protobuf:"bytes,1,opt,name=t,proto3" json:"t,omitempty"`
	R []byte `protobuf:"bytes,2,opt,name=r,proto3" json:"r,omitempty"`
}

func (m *DiscreteLogKnowledge) Reset()                    { *m = DiscreteLogKnowledge{} }
func (m *DiscreteLogKnowledge) String() string            { return proto.CompactTextString(m) }
func (*DiscreteLogKnowledge) ProtoMessage()               {}
func (*DiscreteLogKnowledge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DiscreteLogKnowledge) GetT() []byte {
	if m != nil {
		return m.T
	}
	return nil
}

func (m *DiscreteLogKnowledge) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

type EqualsOneOfTwo struct {
	A_1 []byte `protobuf:"bytes,1,opt,name=a_1,json=a1,proto3" json:"a_1,omitempty"`
	A_2 []byte `protobuf:"bytes,2,opt,name=a_2,json=a2,proto3" json:"a_2,omitempty"`
	B_1 []byte `protobuf:"bytes,3,opt,name=b_1,json=b1,proto3" json:"b_1,omitempty"`
	B_2 []byte `protobuf:"bytes,4,opt,name=b_2,json=b2,proto3" json:"b_2,omitempty"`
	D_1 []byte `protobuf:"bytes,5,opt,name=d_1,json=d1,proto3" json:"d_1,omitempty"`
	D_2 []byte `protobuf:"bytes,6,opt,name=d_2,json=d2,proto3" json:"d_2,omitempty"`
	R_1 []byte `protobuf:"bytes,7,opt,name=r_1,json=r1,proto3" json:"r_1,omitempty"`
	R_2 []byte `protobuf:"bytes,8,opt,name=r_2,json=r2,proto3" json:"r_2,omitempty"`
}

func (m *EqualsOneOfTwo) Reset()                    { *m = EqualsOneOfTwo{} }
func (m *EqualsOneOfTwo) String() string            { return proto.CompactTextString(m) }
func (*EqualsOneOfTwo) ProtoMessage()               {}
func (*EqualsOneOfTwo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EqualsOneOfTwo) GetA_1() []byte {
	if m != nil {
		return m.A_1
	}
	return nil
}

func (m *EqualsOneOfTwo) GetA_2() []byte {
	if m != nil {
		return m.A_2
	}
	return nil
}

func (m *EqualsOneOfTwo) GetB_1() []byte {
	if m != nil {
		return m.B_1
	}
	return nil
}

func (m *EqualsOneOfTwo) GetB_2() []byte {
	if m != nil {
		return m.B_2
	}
	return nil
}

func (m *EqualsOneOfTwo) GetD_1() []byte {
	if m != nil {
		return m.D_1
	}
	return nil
}

func (m *EqualsOneOfTwo) GetD_2() []byte {
	if m != nil {
		return m.D_2
	}
	return nil
}

func (m *EqualsOneOfTwo) GetR_1() []byte {
	if m != nil {
		return m.R_1
	}
	return nil
}

func (m *EqualsOneOfTwo) GetR_2() []byte {
	if m != nil {
		return m.R_2
	}
	return nil
}

type VerifiableShuffle struct {
}

func (m *VerifiableShuffle) Reset()                    { *m = VerifiableShuffle{} }
func (m *VerifiableShuffle) String() string            { return proto.CompactTextString(m) }
func (*VerifiableShuffle) ProtoMessage()               {}
func (*VerifiableShuffle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DiscreteLogEquality struct {
	Ts [][]byte `protobuf:"bytes,1,rep,name=ts,proto3" json:"ts,omitempty"`
	R  []byte   `protobuf:"bytes,2,opt,name=r,proto3" json:"r,omitempty"`
}

func (m *DiscreteLogEquality) Reset()                    { *m = DiscreteLogEquality{} }
func (m *DiscreteLogEquality) String() string            { return proto.CompactTextString(m) }
func (*DiscreteLogEquality) ProtoMessage()               {}
func (*DiscreteLogEquality) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DiscreteLogEquality) GetTs() [][]byte {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *DiscreteLogEquality) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func init() {
	proto.RegisterType((*OuterStruct)(nil), "common_pb.OuterStruct")
	proto.RegisterType((*Key)(nil), "common_pb.Key")
	proto.RegisterType((*DiscreteLogKnowledge)(nil), "common_pb.DiscreteLogKnowledge")
	proto.RegisterType((*EqualsOneOfTwo)(nil), "common_pb.EqualsOneOfTwo")
	proto.RegisterType((*VerifiableShuffle)(nil), "common_pb.VerifiableShuffle")
	proto.RegisterType((*DiscreteLogEquality)(nil), "common_pb.DiscreteLogEquality")
}

func init() {
	proto.RegisterFile("github.com/ashwinsr/auctions/common_pb/common.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x6f, 0xe2, 0x30,
	0x10, 0x85, 0x95, 0x04, 0x58, 0x76, 0x40, 0xec, 0xae, 0x59, 0xad, 0xa2, 0xbd, 0xb4, 0xca, 0xa9,
	0xa7, 0xa0, 0x18, 0xf5, 0x1f, 0xb4, 0x27, 0xaa, 0x22, 0x85, 0xb6, 0x57, 0xe4, 0x24, 0x0e, 0x58,
	0x0d, 0x31, 0xb5, 0x27, 0x42, 0xfc, 0x93, 0xfe, 0xdc, 0x3a, 0xb6, 0x85, 0x5a, 0xa9, 0x37, 0xcf,
	0x37, 0xef, 0x3d, 0xbd, 0x91, 0x61, 0xb9, 0x13, 0xb8, 0xef, 0x8a, 0xb4, 0x94, 0x87, 0x05, 0xd3,
	0xfb, 0x93, 0x68, 0xb5, 0x5a, 0xb0, 0xae, 0x44, 0x21, 0x5b, 0xbd, 0x30, 0xf4, 0x20, 0xdb, 0xed,
	0xb1, 0xf0, 0xaf, 0xf4, 0xa8, 0x24, 0x4a, 0xf2, 0xf3, 0xc2, 0x93, 0x67, 0x98, 0xac, 0x3b, 0xe4,
	0x6a, 0x83, 0xca, 0x98, 0xc8, 0x7f, 0x18, 0x97, 0x8d, 0xe0, 0x2d, 0x8a, 0x2a, 0x0e, 0xae, 0x83,
	0x9b, 0x61, 0x7e, 0x99, 0xc9, 0x3f, 0x18, 0x69, 0xe4, 0x47, 0xb3, 0x09, 0xed, 0xc6, 0x4f, 0x84,
	0xc0, 0xa0, 0x62, 0xc8, 0xe2, 0xc8, 0xd0, 0x69, 0x6e, 0xdf, 0xc9, 0x23, 0x44, 0x2b, 0x7e, 0x26,
	0xbf, 0x21, 0x7a, 0xe5, 0x67, 0x9b, 0x34, 0xcd, 0xfb, 0x27, 0xb9, 0x85, 0xa1, 0xe9, 0x20, 0x6b,
	0x9b, 0x31, 0xa1, 0x57, 0xe9, 0xa5, 0x4a, 0x7a, 0x27, 0x74, 0xa9, 0x38, 0xf2, 0x07, 0xb9, 0x5b,
	0xb5, 0xf2, 0xd4, 0xf0, 0x6a, 0xc7, 0x73, 0xa7, 0x4e, 0x28, 0xfc, 0xfd, 0x6e, 0x4d, 0xa6, 0x10,
	0xa0, 0x8f, 0x0f, 0xb0, 0x9f, 0x94, 0x0d, 0x36, 0x93, 0x4a, 0xde, 0x03, 0x98, 0xdd, 0xbf, 0x75,
	0xac, 0xd1, 0xeb, 0x96, 0xaf, 0xeb, 0xa7, 0x93, 0x24, 0xbf, 0x20, 0x62, 0xdb, 0xcc, 0x1b, 0x42,
	0x96, 0x39, 0x40, 0xbd, 0x27, 0x64, 0xb4, 0x07, 0x85, 0x51, 0xb8, 0x5b, 0xc2, 0x22, 0x73, 0x80,
	0xc6, 0x03, 0x0f, 0xac, 0xa2, 0x32, 0x8a, 0xa1, 0x03, 0x55, 0xe6, 0x00, 0x8d, 0x47, 0x1e, 0x58,
	0x85, 0x32, 0x8a, 0x1f, 0x0e, 0xa8, 0xcc, 0x01, 0x1a, 0x8f, 0x3d, 0xa0, 0xc9, 0x1c, 0xfe, 0xbc,
	0x70, 0x25, 0x6a, 0xc1, 0x8a, 0x86, 0x6f, 0xf6, 0x5d, 0x5d, 0x37, 0x3c, 0x59, 0xc2, 0xfc, 0xd3,
	0x8d, 0xb6, 0xb9, 0xc0, 0x33, 0x99, 0x41, 0x88, 0xda, 0x54, 0x8e, 0x7a, 0x2f, 0xea, 0xaf, 0x47,
	0x16, 0x23, 0xfb, 0xa3, 0xcb, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x9e, 0x75, 0x68, 0x08,
	0x02, 0x00, 0x00,
}
